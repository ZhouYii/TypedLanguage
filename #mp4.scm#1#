#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.1.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 31 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 56 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 5254 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 4 #"eopl"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 19 #"trace/calltrace-lib"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 83
(
 #";=================================Spec&Grammar======================"
 #"==============="
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";;scanner"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";;referred from textbook Appendix B"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"q1-spec"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 14 3 10 #"whitespace"
0 0 24 3 2 #" ("
0 0 14 3 10 #"whitespace"
0 0 24 3 2 #") "
0 0 14 3 4 #"skip"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"comment"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"%\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 21 3 9 #"#\\newline"
0 0 24 3 4 #"))) "
0 0 14 3 4 #"skip"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"identifier"
0 0 24 3 2 #" ("
0 0 14 3 6 #"letter"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 14 3 6 #"letter"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 4 #"))) "
0 0 14 3 6 #"symbol"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"number"
0 0 24 3 2 #" ("
0 0 14 3 5 #"digit"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 3 #")) "
0 0 14 3 6 #"number"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 8 #"arith-op"
0 0 24 3 3 #" (("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"+\""
0 0 24 3 3 #") ("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"*\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"/\""
0 0 24 3 4 #"))) "
0 0 14 3 6 #"symbol"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"compare-op"
0 0 24 3 3 #" (("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 19 3 3 #"\">\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"<\""
0 0 24 3 3 #")) "
0 0 14 3 6 #"symbol"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";;parser"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";;referred from textbook Appdendix B"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"q1-grammar"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 6 #"number"
0 0 24 3 2 #") "
0 0 14 3 7 #"num-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 10 #"identifier"
0 0 24 3 2 #") "
0 0 14 3 7 #"var-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"let\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 19 3 4 #"\"in\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 7 #"let-exp"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 8 #"\"letrec\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 19 3 4 #"\"in\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 10 #"letrec-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 6 #"\"proc\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 2 #") "
0 0 19 3 3 #"\")\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 8 #"proc-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 3 #" ( "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 7 #"exp-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 54
#";(expression (\"newref\" \"(\" expression \")\") newRef-exp)"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 50 #";(expression (\"set\" identifier expression)set-exp)"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 7 #"\"begin\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 19 3 3 #"\";\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 19 3 5 #"\"end\""
0 0 24 3 1 #")"
0 0 15 3 9 #"begin-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"if\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"then\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"else\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #")"
0 0 14 3 6 #"if-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 8 #"arith-op"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 19 3 3 #"\")\""
0 0 24 3 1 #")"
0 0 14 3 9 #"arith-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 10 #"compare-op"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 11 #"compare-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"=\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 15 #"compare-equ-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 6 #"\"true\""
0 0 24 3 2 #") "
0 0 14 3 8 #"true-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 7 #"\"false\""
0 0 24 3 2 #") "
0 0 14 3 9 #"false-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 9 #"\"newpair\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 11 #"newpair-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 7 #"\"first\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 9 #"first-exp"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 8 #"\"second\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 10 #"second-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";;sllgen from textbook appendix B"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 28 #"sllgen:make-define-datatypes"
0 0 24 3 1 #" "
0 0 14 3 7 #"q1-spec"
0 0 24 3 1 #" "
0 0 14 3 10 #"q1-grammar"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"scan&parse"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 25 #"sllgen:make-string-parser"
0 0 24 3 1 #" "
0 0 14 3 7 #"q1-spec"
0 0 24 3 1 #" "
0 0 14 3 10 #"q1-grammar"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 82
(
 #";=================================Interpreter======================="
 #"=============="
) 0 0 24 29 1 #"\n"
0 0 17 3 26 #";;Copy from MP instruction"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 1 #" "
0 0 14 3 5 #"type?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"int-type"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"bool-type"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"proc-type"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"arg-type"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 5 #"type?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 11 #"return-type"
0 0 24 3 1 #" "
0 0 14 3 5 #"type?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"pair-type"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 10 #"first-type"
0 0 24 3 1 #" "
0 0 14 3 5 #"type?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 11 #"second-type"
0 0 24 3 1 #" "
0 0 14 3 5 #"type?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"tvar-type"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"sym"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"bad-type"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"substitution?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"list-of"
0 0 24 3 2 #" ("
0 0 14 3 7 #"pair-of"
0 0 24 3 1 #" "
0 0 14 3 10 #"tvar-type?"
0 0 24 3 1 #" "
0 0 14 3 5 #"type?"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";;Answer = type*subst"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";;type-of: Exp*tenv*subst ->answer"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 6 #"answer"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"an-answer"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"type"
0 0 24 3 1 #" "
0 0 14 3 5 #"type?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 14 3 13 #"substitution?"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;Add pair-val"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 6 #"expval"
0 0 24 3 1 #" "
0 0 14 3 7 #"expval?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"num-val"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"value"
0 0 24 3 1 #" "
0 0 14 3 7 #"number?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"bool-val"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 7 #"boolean"
0 0 24 3 1 #" "
0 0 14 3 8 #"boolean?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"proc-val"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 5 #"proc?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"pair-val"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"expval?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 7 #"expval?"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"typeCheck"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ty1"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";;Refered from slides"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 5 #"proc?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"procedure"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"bvar"
0 0 24 3 1 #" "
0 0 14 3 5 #"list?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 17 #"type-environment?"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";;define environment; code from slides and textbook pg.86 figure 3.1"
 #"2"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 17 3 27 #";; why are these separated?"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 16 #"type-environment"
0 0 24 3 1 #" "
0 0 14 3 17 #"type-environment?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 17 #"empty-tenv-record"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 20 #"extended-tenv-record"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"sym"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"type"
0 0 24 3 1 #" "
0 0 14 3 5 #"type?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"tenv"
0 0 24 3 1 #" "
0 0 14 3 17 #"type-environment?"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"empty-tenv"
0 0 24 3 1 #" "
0 0 14 3 17 #"empty-tenv-record"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"extend-tenv"
0 0 24 3 1 #" "
0 0 14 3 20 #"extended-tenv-record"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"apply-tenv"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"tenv"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 16 #"type-environment"
0 0 24 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 17 #"empty-tenv-record"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"apply-tenv"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"Unbound variable ~s\""
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 20 #"extended-tenv-record"
0 0 24 3 2 #" ("
0 0 14 3 4 #"sym1"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 1 #" "
0 0 14 3 7 #"old-env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 1 #" "
0 0 14 3 4 #"sym1"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                                "
0 0 14 3 4 #"val1"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 10 #"apply-tenv"
0 0 24 3 1 #" "
0 0 14 3 7 #"old-env"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"init-tenv"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"extend-tenv"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 8 #"int-type"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 11 #"extend-tenv"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 8 #"int-type"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 11 #"extend-tenv"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"i"
0 0 24 3 2 #" ("
0 0 14 3 8 #"int-type"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 10 #"empty-tenv"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; fresh-tvar-type : () -> Type"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";; Page: 265  "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"fresh-tvar-type"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 2 #"sn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 2 #"sn"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 2 #"sn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"tvar-type"
0 0 24 3 1 #" "
0 0 14 3 2 #"sn"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";; otype->type : OptionalType -> Type"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Page: 265"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;deleted "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";;code from book pg.70"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"expval->num"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 6 #"expval"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"num-val"
0 0 24 3 2 #" ("
0 0 14 3 3 #"num"
0 0 24 3 2 #") "
0 0 14 3 3 #"num"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 22 #"expval-extractor-error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";;code from book pg.70"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"expval->bool"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 6 #"expval"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"bool-val"
0 0 24 3 2 #" ("
0 0 14 3 4 #"bool"
0 0 24 3 2 #") "
0 0 14 3 4 #"bool"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 101
(
 #";;refered from: https://github.com/mwand/eopl3/blob/master/chapter4/"
 #"explicit-refs/data-structures.scm"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"expval->proc"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 6 #"expval"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"proc-val"
0 0 24 3 2 #" ("
0 0 14 3 4 #"proc"
0 0 24 3 2 #") "
0 0 14 3 4 #"proc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 22 #"expval-extractor-error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 101
(
 #";;refered from: https://github.com/mwand/eopl3/blob/master/chapter4/"
 #"explicit-refs/data-structures.scm"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 22 #"expval-extractor-error"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"variant"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 5 #"value"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";;;;;;;;;;;;;;;; Unit substitution ;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";; apply-one-subst: type * tvar * type -> type"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";; (apply-one-subst ty0 var ty1) returns the type obtained by"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";; substituting ty1 for every occurrence of tvar in ty0.  This is"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";; sometimes written ty0[tvar=ty1]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";; apply-one-subst : Type * Tvar * Type -> Type"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Page: 260"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"apply-one-subst"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ty0"
0 0 24 3 1 #" "
0 0 14 3 4 #"tvar"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty0"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"int-type"
0 0 24 3 5 #" () ("
0 0 14 3 8 #"int-type"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"bool-type"
0 0 24 3 5 #" () ("
0 0 14 3 9 #"bool-type"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"proc-type"
0 0 24 3 2 #" ("
0 0 14 3 8 #"arg-type"
0 0 24 3 1 #" "
0 0 14 3 11 #"result-type"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 9 #"proc-type"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 15 #"apply-one-subst"
0 0 24 3 1 #" "
0 0 14 3 8 #"arg-type"
0 0 24 3 1 #" "
0 0 14 3 4 #"tvar"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 15 #"apply-one-subst"
0 0 24 3 1 #" "
0 0 14 3 11 #"result-type"
0 0 24 3 1 #" "
0 0 14 3 4 #"tvar"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"tvar-type"
0 0 24 3 2 #" ("
0 0 14 3 2 #"sn"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty0"
0 0 24 3 1 #" "
0 0 14 3 4 #"tvar"
0 0 24 3 2 #") "
0 0 14 3 3 #"ty1"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"bad-type"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty0"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";;;;;;;;;;;;;;;; Substitutions ;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";; a substitution is a map from unknown types to types."
0 0 24 29 1 #"\n"
0 0 17 3 47 #";; we'll represent this as an association list."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"pair-of"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"pred1"
0 0 24 3 1 #" "
0 0 14 3 5 #"pred2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 14 3 5 #"pred1"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"pred2"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";; basic observer: apply-subst-to-type"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";; this is sometimes written ty1.subst "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";; apply-subst-to-type : Type * Subst -> Type"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Page: 261"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"apply-subst-to-type"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"ty"
0 0 24 3 1 #" "
0 0 14 3 5 #"subst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 1 #" "
0 0 14 3 2 #"ty"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"int-type"
0 0 24 3 5 #" () ("
0 0 14 3 8 #"int-type"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"bool-type"
0 0 24 3 5 #" () ("
0 0 14 3 9 #"bool-type"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"proc-type"
0 0 24 3 2 #" ("
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 14 3 2 #"t2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 9 #"proc-type"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 19 #"apply-subst-to-type"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 14 3 5 #"subst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 19 #"apply-subst-to-type"
0 0 24 3 1 #" "
0 0 14 3 2 #"t2"
0 0 24 3 1 #" "
0 0 14 3 5 #"subst"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"tvar-type"
0 0 24 3 2 #" ("
0 0 14 3 2 #"sn"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"tmp"
0 0 24 3 2 #" ("
0 0 14 3 5 #"assoc"
0 0 24 3 1 #" "
0 0 14 3 2 #"ty"
0 0 24 3 1 #" "
0 0 14 3 5 #"subst"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 3 #"tmp"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"tmp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                       "
0 0 14 3 2 #"ty"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"bad-type"
0 0 24 3 1 #" "
0 0 14 3 2 #"ty"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";; empty-subst : () -> Subst"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";; produces a representation of the empty substitution."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";; extend-subst : Subst * Tvar * Type -> Subst"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";; (extend-subst s tv t) produces a substitution with the property"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";; that for all t0,"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";;   (apply-subst t0 (extend-subst s tv t))"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";;   = (apply-one-subst (apply-subst t0 s) tv t)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";; i.e.,  t0.(s[tv=t]) = (t0.s)[tv=t]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";; this means that for any type variable tv0 in the domain of s,"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";;   (apply-subst tv0 (extend-subst s tv t))"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";;   = (apply-one-subst (apply-subst tv0 s) tv t)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";; so we extend the substitution with a new element, and apply [t/v]"
 #" to every"
) 0 0 24 29 1 #"\n"
0 0 17 3 40 #";; element already in the substitution. "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";; empty-subst : () -> Subst"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";; Page 262"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"empty-subst"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 4 #" () "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";; extend-subst : Subst * Tvar * Type -> Subst"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";; usage: tvar not already bound in subst."
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Page: 262"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"extend-subst"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 14 3 4 #"tvar"
0 0 24 3 1 #" "
0 0 14 3 2 #"ty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"cons"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"tvar"
0 0 24 3 1 #" "
0 0 14 3 2 #"ty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 6 #"oldlhs"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 6 #"oldrhs"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"cons"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 14 3 6 #"oldlhs"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 15 #"apply-one-subst"
0 0 24 3 1 #" "
0 0 14 3 6 #"oldrhs"
0 0 24 3 1 #" "
0 0 14 3 4 #"tvar"
0 0 24 3 1 #" "
0 0 14 3 2 #"ty"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 5 #"subst"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";; unifier : Type * Type * Subst * Exp -> Subst OR Fails"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Page: 264"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"unifier"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ty1"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 24 3 1 #" "
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"ty1"
0 0 24 3 2 #" ("
0 0 14 3 19 #"apply-subst-to-type"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 24 3 1 #" "
0 0 14 3 5 #"subst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 3 #"ty2"
0 0 24 3 2 #" ("
0 0 14 3 19 #"apply-subst-to-type"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 24 3 1 #" "
0 0 14 3 5 #"subst"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 24 3 2 #") "
0 0 14 3 5 #"subst"
0 0 24 3 13 #")            "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 10 #"tvar-type?"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 14 #"no-occurrence?"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 12 #"extend-subst"
0 0 24 3 1 #" "
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 30 #"report-no-occurrence-violation"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 10 #"tvar-type?"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 14 #"no-occurrence?"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 12 #"extend-subst"
0 0 24 3 1 #" "
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 30 #"report-no-occurrence-violation"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 10 #"proc-type?"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 24 3 3 #") ("
0 0 14 3 10 #"proc-type?"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 5 #"subst"
0 0 24 3 2 #" ("
0 0 14 3 7 #"unifier"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 19 #"proc-type->arg-type"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 19 #"proc-type->arg-type"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                       "
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 5 #"subst"
0 0 24 3 2 #" ("
0 0 14 3 7 #"unifier"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 22 #"proc-type->result-type"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 22 #"proc-type->result-type"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                         "
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 14 3 5 #"subst"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 26 #"report-unification-failure"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 26 #"report-unification-failure"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ty1"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 19 #"unification-failure"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 44 #"\"Type mismatch: ~s doesn't match ~s in ~s~%\""
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 21 #"type-to-external-form"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 21 #"type-to-external-form"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 3 #"exp"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 30 #"report-no-occurrence-violation"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ty1"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 19 #"check-no-occurence!"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 68
(
 #"\"Can't unify: type variable ~s occurs in type ~s in expression ~s~%"
 #"\""
) 0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 21 #"type-to-external-form"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 21 #"type-to-external-form"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 3 #"exp"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";; no-occurrence? : Tvar * Type -> Bool"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";; usage: Is there an occurrence of tvar in ty?"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Page: 265"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"no-occurrence?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"tvar"
0 0 24 3 1 #" "
0 0 14 3 2 #"ty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 1 #" "
0 0 14 3 2 #"ty"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"int-type"
0 0 24 3 4 #" () "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"bool-type"
0 0 24 3 4 #" () "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"proc-type"
0 0 24 3 2 #" ("
0 0 14 3 8 #"arg-type"
0 0 24 3 1 #" "
0 0 14 3 11 #"result-type"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 3 #"and"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 14 #"no-occurrence?"
0 0 24 3 1 #" "
0 0 14 3 4 #"tvar"
0 0 24 3 1 #" "
0 0 14 3 8 #"arg-type"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 14 #"no-occurrence?"
0 0 24 3 1 #" "
0 0 14 3 4 #"tvar"
0 0 24 3 1 #" "
0 0 14 3 11 #"result-type"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"tvar-type"
0 0 24 3 2 #" ("
0 0 14 3 13 #"serial-number"
0 0 24 3 3 #") ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"tvar"
0 0 24 3 1 #" "
0 0 14 3 2 #"ty"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"bad-type"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"tvar-type?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"ty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 1 #" "
0 0 14 3 2 #"ty"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"tvar-type"
0 0 24 3 1 #"("
0 0 14 3 3 #"sym"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"proc-type?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"ty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 1 #" "
0 0 14 3 2 #"ty"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"proc-type"
0 0 24 3 1 #"("
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 14 3 2 #"t2"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"proc-type->arg-type"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"ty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 1 #" "
0 0 14 3 2 #"ty"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"proc-type"
0 0 24 3 2 #" ("
0 0 14 3 8 #"arg-type"
0 0 24 3 1 #" "
0 0 14 3 11 #"result-type"
0 0 24 3 2 #") "
0 0 14 3 8 #"arg-type"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 19 #"proc-type->arg-type"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 19 3 21 #"\"Not a proc type: ~s\""
0 0 24 3 1 #" "
0 0 14 3 2 #"ty"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 22 #"proc-type->result-type"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"ty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 1 #" "
0 0 14 3 2 #"ty"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"proc-type"
0 0 24 3 2 #" ("
0 0 14 3 8 #"arg-type"
0 0 24 3 1 #" "
0 0 14 3 11 #"result-type"
0 0 24 3 2 #") "
0 0 14 3 11 #"result-type"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 23 #"proc-type->result-types"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 19 3 21 #"\"Not a proc type: ~s\""
0 0 24 3 1 #" "
0 0 14 3 2 #"ty"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";; type-to-external-form : Type -> List"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Page: 266"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 21 #"type-to-external-form"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"ty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 1 #" "
0 0 14 3 2 #"ty"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"int-type"
0 0 24 3 4 #" () "
0 0 21 3 1 #"'"
0 0 14 3 3 #"int"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"bool-type"
0 0 24 3 4 #" () "
0 0 21 3 1 #"'"
0 0 14 3 4 #"bool"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"proc-type"
0 0 24 3 2 #" ("
0 0 14 3 8 #"arg-type"
0 0 24 3 1 #" "
0 0 14 3 11 #"result-type"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 4 #"list"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 21 #"type-to-external-form"
0 0 24 3 1 #" "
0 0 14 3 8 #"arg-type"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 21 3 1 #"'"
0 0 14 3 2 #"->"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 21 #"type-to-external-form"
0 0 24 3 1 #" "
0 0 14 3 11 #"result-type"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"tvar-type"
0 0 24 3 2 #" ("
0 0 14 3 13 #"serial-number"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 14 #"string->symbol"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 19 3 6 #"\"tvar\""
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 14 #"number->string"
0 0 24 3 1 #" "
0 0 14 3 13 #"serial-number"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"ty"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #";=====================================type-of-exp==================="
 #"====================="
) 0 0 24 29 1 #"\n"
0 0 17 3 21 #"; For proc expression"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"zip"
0 0 24 3 1 #" "
0 0 28 3 1 #"."
0 0 24 3 1 #" "
0 0 14 3 3 #"xss"
0 0 24 3 3 #") ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 3 #"xss"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 21 #"get-args-placeholders"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"args-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 9 #"tvar-type"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 10 #"get-var-id"
0 0 24 3 1 #" "
0 0 14 3 9 #"args-list"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"get-var-id"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"t\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 14 #"global-counter"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"global-counter"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 5 #"count"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 5 #"count"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 5 #"count"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 5 #"count"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"filter-id"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 12 #"id-expr-pair"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 12 #"id-expr-pair"
0 0 24 3 2 #") "
0 0 14 3 2 #"id"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 21 3 1 #"'"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 12 #"id-expr-pair"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 22 #"mapping-invalidate-key"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"mapping"
0 0 24 3 1 #" "
0 0 14 3 9 #"target-id"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" [("
0 0 14 3 5 #"front"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 7 #"mapping"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"rest"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 7 #"mapping"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"rest"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 9 #"filter-id"
0 0 24 3 1 #" "
0 0 14 3 5 #"front"
0 0 24 3 1 #" "
0 0 14 3 9 #"target-id"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 9 #"filter-id"
0 0 24 3 1 #" "
0 0 14 3 5 #"front"
0 0 24 3 1 #" "
0 0 14 3 9 #"target-id"
0 0 24 3 3 #") ("
0 0 14 3 22 #"mapping-invalidate-key"
0 0 24 3 1 #" "
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 9 #"target-id"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 27 #"mapping-invalidate-all-keys"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"mapping"
0 0 24 3 1 #" "
0 0 14 3 8 #"key-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 8 #"key-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 7 #"mapping"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" [("
0 0 14 3 11 #"new-mapping"
0 0 24 3 2 #" ("
0 0 14 3 22 #"mapping-invalidate-key"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 8 #"key-list"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 27 #"mapping-invalidate-all-keys"
0 0 24 3 1 #" "
0 0 14 3 11 #"new-mapping"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 8 #"key-list"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 112
(
 #"; Replace instantiated identifiers : For 1 to n, replace in expr_i, "
 #"invalidate identifier_i in mapping structure"
) 0 0 24 29 1 #"\n"
0 0 17 3 95
(
 #"; Return the modified id-var mapping structure in a tuple : (all rep"
 #"laced exprs, final mapping)"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 25 #"let-recursive-replacement"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 13 #"var-exp-pairs"
0 0 24 3 1 #" "
0 0 14 3 11 #"id-mappings"
0 0 24 3 1 #" "
0 0 14 3 13 #"replaced-exps"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 13 #"var-exp-pairs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 13 #"replaced-exps"
0 0 24 3 1 #" "
0 0 14 3 11 #"id-mappings"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" [("
0 0 14 3 5 #"front"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 13 #"var-exp-pairs"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"rest"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 13 #"var-exp-pairs"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 7 #"bind-id"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"front"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"bind-expr"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"front"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 8 #"new-expr"
0 0 24 3 2 #" ("
0 0 14 3 27 #"replace-uninstantiated-vars"
0 0 24 3 1 #" "
0 0 14 3 9 #"bind-expr"
0 0 24 3 1 #" "
0 0 14 3 11 #"id-mappings"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 11 #"new-mapping"
0 0 24 3 2 #" ("
0 0 14 3 22 #"mapping-invalidate-key"
0 0 24 3 1 #" "
0 0 14 3 11 #"id-mappings"
0 0 24 3 1 #" "
0 0 14 3 7 #"bind-id"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 25 #"let-recursive-replacement"
0 0 24 3 1 #" "
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 11 #"new-mapping"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 13 #"replaced-exps"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-expr"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"let-replace"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"vars"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 1 #" "
0 0 14 3 11 #"id-mappings"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" [("
0 0 14 3 13 #"var-exp-pairs"
0 0 24 3 2 #" ("
0 0 14 3 3 #"zip"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 15 #"new-exp-mapping"
0 0 24 3 2 #" ("
0 0 14 3 25 #"let-recursive-replacement"
0 0 24 3 1 #" "
0 0 14 3 13 #"var-exp-pairs"
0 0 24 3 1 #" "
0 0 14 3 11 #"id-mappings"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 5 #"()))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"vars"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 15 #"new-exp-mapping"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 15 #"new-exp-mapping"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"mapping-contains"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"mapping"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 7 #"mapping"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 21 3 2 #"#f"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 24 3 1 #" "
0 0 14 3 7 #"mapping"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 16 #"mapping-contains"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 7 #"mapping"
0 0 24 3 2 #") "
0 0 14 3 6 #"target"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"mapping-get"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"mapping"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 7 #"mapping"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 21 3 1 #"'"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 24 3 1 #" "
0 0 14 3 7 #"mapping"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 5 #"cadar"
0 0 24 3 1 #" "
0 0 14 3 7 #"mapping"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 11 #"mapping-get"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 7 #"mapping"
0 0 24 3 2 #") "
0 0 14 3 6 #"target"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 25 #"replace-vars-in-expr-list"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"expr-list"
0 0 24 3 1 #" "
0 0 14 3 11 #"id-mappings"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 27 #"replace-uninstantiated-vars"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 11 #"id-mappings"
0 0 24 3 3 #")) "
0 0 14 3 9 #"expr-list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 27 #"replace-uninstantiated-vars"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 11 #"id-mappings"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"num-exp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"num"
0 0 24 3 2 #") "
0 0 14 3 4 #"expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"true-exp"
0 0 24 3 4 #" () "
0 0 14 3 8 #"true-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"false-exp"
0 0 24 3 4 #" () "
0 0 14 3 9 #"false-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"var-exp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 16 #"mapping-contains"
0 0 24 3 1 #" "
0 0 14 3 11 #"id-mappings"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 11 #"mapping-get"
0 0 24 3 1 #" "
0 0 14 3 11 #"id-mappings"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 14 3 7 #"var-exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"let-exp"
0 0 24 3 2 #" ("
0 0 14 3 8 #"var-list"
0 0 24 3 1 #" "
0 0 14 3 9 #"exp1-list"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" [("
0 0 14 3 15 #"var-exp-mapping"
0 0 24 3 2 #" ("
0 0 14 3 11 #"let-replace"
0 0 24 3 1 #" "
0 0 14 3 8 #"var-list"
0 0 24 3 1 #" "
0 0 14 3 9 #"exp1-list"
0 0 24 3 1 #" "
0 0 14 3 11 #"id-mappings"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 12 #"new-exp-list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 15 #"var-exp-mapping"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 11 #"new-mapping"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 15 #"var-exp-mapping"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 13 #"replaced-body"
0 0 24 3 2 #" ("
0 0 14 3 27 #"replace-uninstantiated-vars"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 11 #"new-mapping"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 7 #"let-exp"
0 0 24 3 1 #" "
0 0 14 3 8 #"var-list"
0 0 24 3 1 #" "
0 0 14 3 12 #"new-exp-list"
0 0 24 3 1 #" "
0 0 14 3 13 #"replaced-body"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 99
(
 #"; Letrec is different - invalidate all keys in the mapping which cor"
 #"respond to var-list identifiers"
) 0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"letrec-exp"
0 0 24 3 2 #" ("
0 0 14 3 8 #"var-list"
0 0 24 3 1 #" "
0 0 14 3 8 #"exp-list"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" [("
0 0 14 3 11 #"new-mapping"
0 0 24 3 2 #" ("
0 0 14 3 27 #"mapping-invalidate-all-keys"
0 0 24 3 1 #" "
0 0 14 3 11 #"id-mappings"
0 0 24 3 1 #" "
0 0 14 3 8 #"var-list"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 13 #"new-expr-list"
0 0 24 3 2 #" ("
0 0 14 3 25 #"replace-vars-in-expr-list"
0 0 24 3 1 #" "
0 0 14 3 8 #"exp-list"
0 0 24 3 1 #" "
0 0 14 3 11 #"id-mappings"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 8 #"new-body"
0 0 24 3 2 #" ("
0 0 14 3 27 #"replace-uninstantiated-vars"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 11 #"new-mapping"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"letrec-exp"
0 0 24 3 1 #" "
0 0 14 3 8 #"var-list"
0 0 24 3 1 #" "
0 0 14 3 13 #"new-expr-list"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-body"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"proc-exp"
0 0 24 3 2 #" ("
0 0 14 3 8 #"var-list"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" [("
0 0 14 3 11 #"new-mapping"
0 0 24 3 2 #" ("
0 0 14 3 27 #"mapping-invalidate-all-keys"
0 0 24 3 1 #" "
0 0 14 3 11 #"id-mappings"
0 0 24 3 1 #" "
0 0 14 3 8 #"var-list"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 8 #"proc-exp"
0 0 24 3 1 #" "
0 0 14 3 8 #"var-list"
0 0 24 3 2 #" ("
0 0 14 3 27 #"replace-uninstantiated-vars"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 11 #"new-mapping"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"exp-exp"
0 0 24 3 2 #" ("
0 0 14 3 5 #"rator"
0 0 24 3 1 #" "
0 0 14 3 9 #"rand-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" [("
0 0 14 3 9 #"new-rator"
0 0 24 3 2 #" ("
0 0 14 3 27 #"replace-uninstantiated-vars"
0 0 24 3 1 #" "
0 0 14 3 5 #"rator"
0 0 24 3 1 #" "
0 0 14 3 11 #"id-mappings"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 9 #"new-rands"
0 0 24 3 2 #" ("
0 0 14 3 25 #"replace-vars-in-expr-list"
0 0 24 3 1 #" "
0 0 14 3 9 #"rand-list"
0 0 24 3 1 #" "
0 0 14 3 11 #"id-mappings"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 7 #"exp-exp"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-rator"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-rands"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 9 #"begin-exp"
0 0 24 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 14 3 9 #"exp2-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" [("
0 0 14 3 8 #"new-exp1"
0 0 24 3 2 #" ("
0 0 14 3 27 #"replace-uninstantiated-vars"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 14 3 11 #"id-mappings"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 13 #"new-exp2-list"
0 0 24 3 2 #" ("
0 0 14 3 25 #"replace-vars-in-expr-list"
0 0 24 3 1 #" "
0 0 14 3 9 #"exp2-list"
0 0 24 3 1 #" "
0 0 14 3 11 #"id-mappings"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 15 3 9 #"begin-exp"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-exp1"
0 0 24 3 1 #" "
0 0 14 3 13 #"new-exp2-list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"if-exp"
0 0 24 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #" "
0 0 14 3 2 #"e3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" [("
0 0 14 3 6 #"new-e1"
0 0 24 3 2 #" ("
0 0 14 3 27 #"replace-uninstantiated-vars"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 11 #"id-mappings"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 6 #"new-e2"
0 0 24 3 2 #" ("
0 0 14 3 27 #"replace-uninstantiated-vars"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #" "
0 0 14 3 11 #"id-mappings"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 6 #"new-e3"
0 0 24 3 2 #" ("
0 0 14 3 27 #"replace-uninstantiated-vars"
0 0 24 3 1 #" "
0 0 14 3 2 #"e3"
0 0 24 3 1 #" "
0 0 14 3 11 #"id-mappings"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 6 #"if-exp"
0 0 24 3 1 #" "
0 0 14 3 6 #"new-e1"
0 0 24 3 1 #" "
0 0 14 3 6 #"new-e2"
0 0 24 3 1 #" "
0 0 14 3 6 #"new-e3"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"arith-exp"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" [("
0 0 14 3 6 #"new-e1"
0 0 24 3 2 #" ("
0 0 14 3 27 #"replace-uninstantiated-vars"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 11 #"id-mappings"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 6 #"new-e2"
0 0 24 3 2 #" ("
0 0 14 3 27 #"replace-uninstantiated-vars"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #" "
0 0 14 3 11 #"id-mappings"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 9 #"arith-exp"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 6 #"new-e1"
0 0 24 3 1 #" "
0 0 14 3 6 #"new-e2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 11 #"compare-exp"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" [("
0 0 14 3 6 #"new-e1"
0 0 24 3 2 #" ("
0 0 14 3 27 #"replace-uninstantiated-vars"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 11 #"id-mappings"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 6 #"new-e2"
0 0 24 3 2 #" ("
0 0 14 3 27 #"replace-uninstantiated-vars"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #" "
0 0 14 3 11 #"id-mappings"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 11 #"compare-exp"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 6 #"new-e1"
0 0 24 3 1 #" "
0 0 14 3 6 #"new-e2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 15 #"compare-equ-exp"
0 0 24 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" [("
0 0 14 3 6 #"new-e1"
0 0 24 3 2 #" ("
0 0 14 3 27 #"replace-uninstantiated-vars"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 11 #"id-mappings"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 6 #"new-e2"
0 0 24 3 2 #" ("
0 0 14 3 27 #"replace-uninstantiated-vars"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #" "
0 0 14 3 11 #"id-mappings"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 15 #"compare-equ-exp"
0 0 24 3 1 #" "
0 0 14 3 6 #"new-e1"
0 0 24 3 1 #" "
0 0 14 3 6 #"new-e2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 11 #"newpair-exp"
0 0 24 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" [("
0 0 14 3 6 #"new-e1"
0 0 24 3 2 #" ("
0 0 14 3 27 #"replace-uninstantiated-vars"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 11 #"id-mappings"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 6 #"new-e2"
0 0 24 3 2 #" ("
0 0 14 3 27 #"replace-uninstantiated-vars"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #" "
0 0 14 3 11 #"id-mappings"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 11 #"newpair-exp"
0 0 24 3 1 #" "
0 0 14 3 6 #"new-e1"
0 0 24 3 1 #" "
0 0 14 3 6 #"new-e2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"first-exp"
0 0 24 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" [("
0 0 14 3 6 #"new-e1"
0 0 24 3 2 #" ("
0 0 14 3 27 #"replace-uninstantiated-vars"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 11 #"id-mappings"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 9 #"first-exp"
0 0 24 3 1 #" "
0 0 14 3 6 #"new-e1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"second-exp"
0 0 24 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" [("
0 0 14 3 6 #"new-e1"
0 0 24 3 2 #" ("
0 0 14 3 27 #"replace-uninstantiated-vars"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 11 #"id-mappings"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 10 #"second-exp"
0 0 24 3 1 #" "
0 0 14 3 6 #"new-e1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      )))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"type-of-exp"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 5 #"subst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 5 #"type?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 3 #"exp"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"num-exp"
0 0 24 3 2 #" ("
0 0 14 3 6 #"number"
0 0 24 3 3 #") ("
0 0 14 3 9 #"an-answer"
0 0 24 3 2 #" ("
0 0 14 3 8 #"int-type"
0 0 24 3 2 #") "
0 0 14 3 5 #"subst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"var-exp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 3 #") ("
0 0 14 3 9 #"an-answer"
0 0 24 3 2 #" ("
0 0 14 3 10 #"apply-tenv"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #") "
0 0 14 3 5 #"subst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"true-exp"
0 0 24 3 5 #" () ("
0 0 14 3 9 #"an-answer"
0 0 24 3 2 #" ("
0 0 14 3 9 #"bool-type"
0 0 24 3 2 #") "
0 0 14 3 5 #"subst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"false-exp"
0 0 24 3 5 #" () ("
0 0 14 3 9 #"an-answer"
0 0 24 3 2 #" ("
0 0 14 3 9 #"bool-type"
0 0 24 3 2 #") "
0 0 14 3 5 #"subst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"let-exp"
0 0 24 3 2 #" ("
0 0 14 3 8 #"var-list"
0 0 24 3 1 #" "
0 0 14 3 9 #"exp1-list"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 11 #"type-of-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 7 #"add-env"
0 0 24 3 1 #" "
0 0 14 3 8 #"var-list"
0 0 24 3 1 #" "
0 0 14 3 9 #"exp1-list"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 102
(
 #";(letrec-exp (var-list exp1-list body)(type-of-exp-letrec var-list e"
 #"xp1-list body env state) );;;TO DO"
) 0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 25 #";(proc-exp (var-list exp)"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 55 #";          (let* [(var-type-list (getNewTvar var-list))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 86
(
 #";                (result-type (type-of-exp exp (add-env var-list var"
 #"-type-list env)))]"
) 0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 52 #";            (proc-type var-type-list result-type)))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"proc-exp"
0 0 24 3 2 #" ("
0 0 14 3 8 #"var-list"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" [("
0 0 14 3 9 #"var-types"
0 0 24 3 2 #" ("
0 0 14 3 21 #"get-args-placeholders"
0 0 24 3 1 #" "
0 0 14 3 8 #"var-list"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 22 #"identifier-var-mapping"
0 0 24 3 2 #" ("
0 0 14 3 3 #"zip"
0 0 24 3 1 #" "
0 0 14 3 8 #"var-list"
0 0 24 3 1 #" "
0 0 14 3 9 #"var-types"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 9 #"proc-type"
0 0 24 3 1 #" "
0 0 14 3 9 #"var-types"
0 0 24 3 2 #" ("
0 0 14 3 11 #"type-of-exp"
0 0 24 3 2 #" ("
0 0 14 3 27 #"replace-uninstantiated-vars"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 22 #"identifier-var-mapping"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"exp-exp"
0 0 24 3 1 #"("
0 0 14 3 5 #"rator"
0 0 24 3 1 #" "
0 0 14 3 9 #"rand-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 8 #"exp-list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 5 #"rator"
0 0 24 3 1 #" "
0 0 14 3 9 #"rand-list"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ["
0 0 14 3 15 #"exp-list-length"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 8 #"exp-list"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ["
0 0 14 3 8 #"env-list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"replicate"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 15 #"exp-list-length"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ["
0 0 14 3 10 #"value-list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 11 #"type-of-exp"
0 0 24 3 1 #" "
0 0 14 3 8 #"exp-list"
0 0 24 3 1 #" "
0 0 14 3 8 #"env-list"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 9 #"list-last"
0 0 24 3 1 #" "
0 0 14 3 10 #"value-list"
0 0 24 3 5 #")))  "
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 81
(
 #";(begin-exp (exp1 exp2-list) (type-of-exp-begin exp1 exp2-list env s"
 #"tate));;TO DO"
) 0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 89
(
 #"; 1) Begin returns the value of the last expression, so we return ty"
 #"pe-of last expression"
) 0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 65
#"; 2) None of the language expressions can modify the environment "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 95
(
 #";    (since we are not using store and environment bindings from let"
 #" only appy to the let-body)"
) 0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 71
(
 #"; So, we can return type-of last expression with the input environme"
 #"nt "
) 0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 9 #"begin-exp"
0 0 24 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 14 3 9 #"exp2-list"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 9 #"exp2-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 11 #"type-of-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 11 #"type-of-exp"
0 0 24 3 2 #" ("
0 0 14 3 9 #"list-last"
0 0 24 3 1 #" "
0 0 14 3 9 #"exp2-list"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"if-exp"
0 0 24 3 1 #"("
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" [("
0 0 14 3 3 #"ty1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"type-of-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 3 #"ty2"
0 0 24 3 2 #" ("
0 0 14 3 11 #"type-of-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 3 #"ty3"
0 0 24 3 2 #" ("
0 0 14 3 11 #"type-of-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp3"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 9 #"typeCheck"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 24 3 2 #" ("
0 0 14 3 9 #"bool-type"
0 0 24 3 3 #"))("
0 0 14 3 9 #"typeCheck"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 14 3 3 #"ty2"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 8 #"bad-type"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"arith-exp"
0 0 24 3 1 #"("
0 0 14 3 8 #"arith-op"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" [("
0 0 14 3 3 #"ty1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"type-of-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ["
0 0 14 3 15 #"exp-list-length"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ["
0 0 14 3 8 #"env-list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"replicate"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 15 #"exp-list-length"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 8 #"ty2-list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 11 #"type-of-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 24 3 1 #" "
0 0 14 3 8 #"env-list"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 8 #"int-list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"replicate"
0 0 24 3 2 #" ("
0 0 14 3 8 #"int-type"
0 0 24 3 2 #") "
0 0 14 3 15 #"exp-list-length"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 13 #"ty2-typeCheck"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 9 #"typeCheck"
0 0 24 3 1 #" "
0 0 14 3 8 #"ty2-list"
0 0 24 3 1 #" "
0 0 14 3 8 #"int-list"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 9 #"typeCheck"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 24 3 2 #" ("
0 0 14 3 8 #"int-type"
0 0 24 3 3 #"))("
0 0 14 3 9 #"typeCheck"
0 0 24 3 2 #" ("
0 0 14 3 11 #"type-of-exp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 8 #"int-type"
0 0 24 3 5 #"))) ("
0 0 14 3 7 #"andBool"
0 0 24 3 1 #" "
0 0 14 3 13 #"ty2-typeCheck"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 14 3 3 #"ty1"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 8 #"bad-type"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 11 #"compare-exp"
0 0 24 3 1 #"("
0 0 14 3 10 #"compare-op"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" [("
0 0 14 3 3 #"ty1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"type-of-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 3 #"ty2"
0 0 24 3 2 #" ("
0 0 14 3 11 #"type-of-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 9 #"typeCheck"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 24 3 2 #" ("
0 0 14 3 8 #"int-type"
0 0 24 3 3 #"))("
0 0 14 3 9 #"typeCheck"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 24 3 2 #" ("
0 0 14 3 8 #"int-type"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 9 #"bool-type"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 8 #"bad-type"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 15 #"compare-equ-exp"
0 0 24 3 1 #"("
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" [("
0 0 14 3 3 #"ty1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"type-of-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 3 #"ty2"
0 0 24 3 2 #" ("
0 0 14 3 11 #"type-of-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 9 #"typeCheck"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 24 3 2 #" ("
0 0 14 3 8 #"int-type"
0 0 24 3 3 #"))("
0 0 14 3 9 #"typeCheck"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 24 3 2 #" ("
0 0 14 3 8 #"int-type"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 9 #"bool-type"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 8 #"bad-type"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 11 #"newpair-exp"
0 0 24 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" [("
0 0 14 3 3 #"ty1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"type-of-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 3 #"ty2"
0 0 24 3 2 #" ("
0 0 14 3 11 #"type-of-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 9 #"pair-type"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"first-exp"
0 0 24 3 1 #"("
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" [("
0 0 14 3 3 #"ty1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"type-of-exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 9 #"pair-type"
0 0 24 3 1 #"("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 6 #"second"
0 0 24 3 2 #") "
0 0 14 3 5 #"first"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 8 #"bad-type"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"second-exp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 24 3 3 #")  "
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" [("
0 0 14 3 3 #"ty1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"type-of-exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 9 #"pair-type"
0 0 24 3 1 #"("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 6 #"second"
0 0 24 3 2 #") "
0 0 14 3 6 #"second"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 8 #"bad-type"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 6 #"))])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"andBool"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"exp-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 8 #"exp-list"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 8 #"exp-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 8 #"exp-list"
0 0 24 3 3 #") ("
0 0 14 3 7 #"andBool"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 8 #"exp-list"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"getNewTvar"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"var-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 3 #") ("
0 0 14 3 9 #"tvar-type"
0 0 24 3 1 #" "
0 0 14 3 6 #"gensym"
0 0 24 3 3 #") )"
0 0 14 3 8 #"var-list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 57 #"; Replicates the given element n times, returning a list."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"replicate"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"element"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"zero?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 7 #"element"
0 0 24 3 2 #" ("
0 0 14 3 9 #"replicate"
0 0 24 3 1 #" "
0 0 14 3 7 #"element"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 45 #"; Returns the last element of the given list."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"list-last"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"list-last"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; A fold left implementation."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"fold-left"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"function"
0 0 24 3 1 #" "
0 0 14 3 8 #"the-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 8 #"the-list"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 8 #"function"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 8 #"the-list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 8 #"the-list"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 8 #"function"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 8 #"the-list"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 8 #"the-list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 3 #"lhs"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 8 #"the-list"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ["
0 0 14 3 3 #"rhs"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 8 #"the-list"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 9 #"fold-left"
0 0 24 3 1 #" "
0 0 14 3 8 #"function"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 8 #"function"
0 0 24 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 8 #"the-list"
0 0 24 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"type-of-exp-letrec"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 17 #"functionNamesList"
0 0 24 3 1 #" "
0 0 14 3 8 #"exp-list"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 6 #"recEnv"
0 0 24 3 2 #" ("
0 0 14 3 16 #"letrec-getEnvRec"
0 0 24 3 1 #" "
0 0 14 3 17 #"functionNamesList"
0 0 24 3 1 #" "
0 0 14 3 8 #"exp-list"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 9 #"extendEnv"
0 0 24 3 2 #" ("
0 0 14 3 13 #"letrec-getEnv"
0 0 24 3 1 #" "
0 0 14 3 17 #"functionNamesList"
0 0 24 3 1 #" "
0 0 14 3 8 #"exp-list"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 11 #"type-of-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 9 #"getRecEnv"
0 0 24 3 1 #" "
0 0 14 3 6 #"recEnv"
0 0 24 3 1 #" "
0 0 14 3 9 #"extendEnv"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"getRecEnv"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"revEnv"
0 0 24 3 1 #" "
0 0 14 3 9 #"extendEnv"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"revEnv"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 15 #"extend-env-rec*"
0 0 24 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp3"
0 0 24 3 1 #" "
0 0 14 3 6 #"oldEnv"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 15 #"extend-env-rec*"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 14 3 4 #"exp2"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 14 3 4 #"exp3"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 14 3 9 #"extendEnv"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 9 #"extendEnv"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"letrec-getEnv"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 17 #"functionNamesList"
0 0 24 3 1 #" "
0 0 14 3 8 #"exp-list"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 1 #"("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 8 #"exp-list"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 8 #"exp-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 8 #"proc-exp"
0 0 24 3 1 #"("
0 0 14 3 8 #"var-list"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 10 #"extend-env"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 17 #"functionNamesList"
0 0 24 3 3 #") ("
0 0 14 3 11 #"type-of-exp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 8 #"exp-list"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 8 #"exp-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 8 #"proc-exp"
0 0 24 3 1 #"("
0 0 14 3 8 #"var-list"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 13 #"letrec-getEnv"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 17 #"functionNamesList"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 8 #"exp-list"
0 0 24 3 3 #") ("
0 0 14 3 10 #"extend-env"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 17 #"functionNamesList"
0 0 24 3 3 #") ("
0 0 14 3 11 #"type-of-exp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 8 #"exp-list"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 3 #" ) "
0 0 14 3 5 #"state"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"letrec-getEnvRec"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 17 #"functionNamesList"
0 0 24 3 1 #" "
0 0 14 3 8 #"exp-list"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 1 #"("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 8 #"exp-list"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 8 #"exp-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 8 #"proc-exp"
0 0 24 3 1 #"("
0 0 14 3 8 #"var-list"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 15 #"extend-env-rec*"
0 0 24 3 1 #" "
0 0 14 3 17 #"functionNamesList"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 8 #"var-list"
0 0 24 3 2 #") "
0 0 14 3 8 #"exp-list"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 8 #"exp-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 8 #"proc-exp"
0 0 24 3 1 #"("
0 0 14 3 8 #"var-list"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 7 #"prevEnv"
0 0 24 3 2 #" ("
0 0 14 3 16 #"letrec-getEnvRec"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 17 #"functionNamesList"
0 0 24 3 2 #")("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 8 #"exp-list"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 7 #"prevEnv"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 15 #"extend-env-rec*"
0 0 24 3 2 #" ("
0 0 14 3 8 #"nameList"
0 0 24 3 1 #" "
0 0 14 3 7 #"varList"
0 0 24 3 1 #" "
0 0 14 3 8 #"bodyList"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 15 #"extend-env-rec*"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 8 #"nameList"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 17 #"functionNamesList"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 7 #"varList"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 8 #"var-list"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 8 #"bodyList"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 8 #"exp-list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                        "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"else"
0 0 24 3 2 #"  "
0 0 14 3 3 #"env"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"type-of-exp-begin"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"letrec"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 18 #"type-of-exp-begins"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"es"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 2 #"v1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"type-of-exp"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 2 #"es"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 2 #"v1"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 18 #"type-of-exp-begins"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"es"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"es"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 18 #"type-of-exp-begins"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"add-env"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"var-list"
0 0 24 3 1 #" "
0 0 14 3 9 #"exp1-list"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 7 #"newtype"
0 0 24 3 2 #" ("
0 0 14 3 11 #"type-of-exp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"exp1-list"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 8 #"var-list"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 10 #"extend-env"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 8 #"var-list"
0 0 24 3 2 #") "
0 0 14 3 7 #"newtype"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 7 #"add-env"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 8 #"var-list"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"exp1-list"
0 0 24 3 3 #") ("
0 0 14 3 10 #"extend-env"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 8 #"var-list"
0 0 24 3 2 #") "
0 0 14 3 7 #"newtype"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"add-env-proc"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"var-list"
0 0 24 3 1 #" "
0 0 14 3 9 #"exp1-list"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 8 #"var-list"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 11 #"expression?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"exp1-list"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 10 #"extend-env"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 8 #"var-list"
0 0 24 3 3 #") ("
0 0 14 3 11 #"type-of-exp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"exp1-list"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 10 #"extend-env"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 8 #"var-list"
0 0 24 3 3 #") ("
0 0 14 3 11 #"type-of-exp"
0 0 24 3 1 #"("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"exp1-list"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 11 #"expression?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"exp1-list"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 10 #"extend-env"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 8 #"var-list"
0 0 24 3 3 #") ("
0 0 14 3 11 #"type-of-exp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"exp1-list"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #") ("
0 0 14 3 12 #"add-env-proc"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 8 #"var-list"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"exp1-list"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 10 #"extend-env"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 8 #"var-list"
0 0 24 3 3 #") ("
0 0 14 3 11 #"type-of-exp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"exp1-list"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #") ("
0 0 14 3 12 #"add-env-proc"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 8 #"var-list"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"exp1-list"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 7 #"))]))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";;================Two cases to resolve letrec and curry============="
 #"="
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"apply-procedure"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"proc1"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 5 #"proc1"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"procedure"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 9 #"saved-env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 7 #"new-env"
0 0 24 3 2 #" ("
0 0 14 3 12 #"add-env-proc"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 9 #"saved-env"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 11 #"type-of-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 7 #"new-env"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";==============================Wrap Func============================"
 #"====="
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"type-of"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"type-of-exp"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 9 #"empty-env"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 82
(
 #";=====================================Test=========================="
 #"=============="
) 0 0 24 29 1 #"\n"
0 0 17 3 16 #";(trace type-of)"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";(trace type-of-exp)"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";(trace add-env)"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";(trace scan&parse)"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";(trace getNewTvar)"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";(trace fold-left)"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";(trace typeCheck)"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";(trace andBool)"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";(trace addCounter)"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";(trace gensym)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Unit test"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"reportmsg"
0 0 24 3 1 #" "
0 0 14 3 3 #"msg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 14 3 3 #"msg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"reporterr"
0 0 24 3 1 #" "
0 0 14 3 3 #"msg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"ERROR: \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 14 3 3 #"msg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"assert"
0 0 24 3 1 #" "
0 0 14 3 3 #"msg"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 9 #"reporterr"
0 0 24 3 1 #" "
0 0 14 3 3 #"msg"
0 0 24 3 2 #") "
0 0 14 3 1 #"b"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"asserteq"
0 0 24 3 1 #" "
0 0 14 3 3 #"msg"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 6 #"assert"
0 0 24 3 1 #" "
0 0 14 3 3 #"msg"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 49 #"; Primitives - Not testing for unbound identifier"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"asserteq"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"test1\""
0 0 24 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"1\""
0 0 24 3 3 #") ("
0 0 14 3 8 #"int-type"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"asserteq"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"test2\""
0 0 24 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"false\""
0 0 24 3 3 #") ("
0 0 14 3 9 #"bool-type"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"asserteq"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"test3\""
0 0 24 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"true\""
0 0 24 3 3 #") ("
0 0 14 3 9 #"bool-type"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; First, Second"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"asserteq"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"test4\""
0 0 24 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 24 3 1 #" "
0 0 19 3 36 #"\"let x = newpair (1,2) in first (x)\""
0 0 24 3 3 #") ("
0 0 14 3 8 #"int-type"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"asserteq"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"test5\""
0 0 24 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 24 3 1 #" "
0 0 19 3 40 #"\"let x = newpair (1,true) in second (x)\""
0 0 24 3 3 #") ("
0 0 14 3 9 #"bool-type"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; NewPair"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"asserteq"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"test6\""
0 0 24 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"newpair (1,true)\""
0 0 24 3 3 #") ("
0 0 14 3 9 #"pair-type"
0 0 24 3 2 #" ("
0 0 14 3 8 #"int-type"
0 0 24 3 3 #") ("
0 0 14 3 9 #"bool-type"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"asserteq"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"test7\""
0 0 24 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 24 3 1 #" "
0 0 19 3 22 #"\"newpair (false,true)\""
0 0 24 3 3 #") ("
0 0 14 3 9 #"pair-type"
0 0 24 3 2 #" ("
0 0 14 3 9 #"bool-type"
0 0 24 3 3 #") ("
0 0 14 3 9 #"bool-type"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"asserteq"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"test8\""
0 0 24 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 24 3 1 #" "
0 0 19 3 16 #"\"newpair (1, 2)\""
0 0 24 3 3 #") ("
0 0 14 3 9 #"pair-type"
0 0 24 3 2 #" ("
0 0 14 3 8 #"int-type"
0 0 24 3 3 #") ("
0 0 14 3 8 #"int-type"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; Comparison, Arithmetic. Only allows integer operands."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"asserteq"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"test9\""
0 0 24 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"=(1,2)\""
0 0 24 3 3 #") ("
0 0 14 3 9 #"bool-type"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"asserteq"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"test10\""
0 0 24 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"=(1,true)\""
0 0 24 3 3 #") ("
0 0 14 3 8 #"bad-type"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"asserteq"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"test11\""
0 0 24 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"+(1,2)\""
0 0 24 3 3 #") ("
0 0 14 3 8 #"int-type"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"asserteq"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"test12\""
0 0 24 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"+(1,true)\""
0 0 24 3 3 #") ("
0 0 14 3 8 #"bad-type"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"asserteq"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"test13\""
0 0 24 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"-(1,2)\""
0 0 24 3 3 #") ("
0 0 14 3 8 #"int-type"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"asserteq"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"test14\""
0 0 24 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"-(1,true)\""
0 0 24 3 3 #") ("
0 0 14 3 8 #"bad-type"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 66
#"; IF : bad type if the last two expressions are not the same type "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"asserteq"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"test15\""
0 0 24 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 24 3 1 #" "
0 0 19 3 30 #"\"if =(1, 2) then 5 else false\""
0 0 24 3 3 #") ("
0 0 14 3 8 #"bad-type"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"asserteq"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"test16\""
0 0 24 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 24 3 1 #" "
0 0 19 3 26 #"\"if =(1, 2) then 5 else 4\""
0 0 24 3 3 #") ("
0 0 14 3 8 #"int-type"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";(type-of \"let f = proc (x) +(x,1) in (f 2)\")"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";(type-of \"- (1,3,true,2)\");bad-type"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";(type-of \"> (false, 9)\");bad-type"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";(type-of \"= (true, ture)\");bad-type"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";(type-of \"if =(1,2) then 5 else false\");bad-type"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";(type-of \"proc(x)x\");proc-type (#(struct:tvar-type t0)) #(struct:"
 #"tvar-type t0))"
) 0 0 24 29 1 #"\n"
0 0 17 3 36 #";(type-of \"proc(x y) newpair (x,y)\")"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";(type-of \"let f = proc(x) +(x,1) in (f true)\");;Wrong"
0 0 24 29 1 #"\n"
0           0
